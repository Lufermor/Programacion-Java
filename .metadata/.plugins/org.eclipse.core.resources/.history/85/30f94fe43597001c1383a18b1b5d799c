package practica3;

public class UsuarioBizi {
	private int idUsuario;
	private int traslados;
	private int circulares;
	private int[] vector = new int[4];
	
	public UsuarioBizi() {
		vector[0] = vector[1] = vector[2] = vector[3] = 0;
	}
	
	public UsuarioBizi(int iDUsuario, int traslados, int circulares) {
		vector[0] =iDUsuario; 
		vector[1] = traslados;
		vector[2] = circulares;
		vector[3] = vector[1] + vector[2];
	}
	
	public UsuarioBizi(int[] vector){
		if(vector[3] == (vector[1] + vector[2])) this.vector = vector;
		else System.out.println("Los datos son incorrectos, no se ha creado el objeto");
	}
	
	public void setVector(int[] vector) {
		if(vector[3] == (vector[1] + vector[2])) this.vector = vector;
		else System.out.println("Los datos son incorrectos, no se ha realizado el cambio");
	}
	
	public int[] getVector() {
		return vector;
	}
	
	public void setIDUsuario(int id) {
		vector[0] =id; 
	}
	
	public int getIDUsuario() {
		return vector[0];
	}
	
	public void setTraslados(int traslados) {
		vector[1] =traslados; 
		calcularUsosTotales();
	}
	
	public int getTraslados() {
		return vector[1];
	}
	
	public void setCirculares(int circulares) {
		vector[2] =circulares; 
		calcularUsosTotales();
	}
	
	public int getCirculares() {
		return vector[2];
	}
	/* Este método no se implementa porque los usos totales se calculan automáticamente.
	public void setUsosTotales(int totalUsos) {
		vector[3] =totalUsos; 
	}*/
	
	public int getUsosTotales() {
		return vector[3];
	}
	
	/*
	 * Pre: ---
	 * Post: Este metodo suma los traslados y los circulares y
	 * los guarda en la posición 3 del vector (usos totales).
	 */
	public void calcularUsosTotales() {
		vector[3] = vector[1] + vector[2];
	}
	
	/*
	 * Pre: ---
	 * Post: Este método suma a los traslados y circulares, los datos pasados como parámetros
	 */
	public void sumarUsos(int tr, int cir) {
		vector[1] = vector[1] + tr;
		vector[2] = vector[2] + cir;
		calcularUsosTotales();
	}
	
	/*
	 * Pre: ---
	 * Post: Este método aumenta el numero de traslados
	 */
	public void sumarTraslado() {
		vector[1] = vector[1] + 1;
		calcularUsosTotales();
	}
	
	/*
	 * Pre: ---
	 * Post: Este método aumenta el numero de usos circulares
	 */
	public void sumarCircular() {
		vector[2] = vector[2] + 1;
		calcularUsosTotales();
	}
	
	@Override
	public String toString() {
		return "[IDUsuario: " + vector[0] + 
				", Traslados: " + vector[1] + 
				", Usos circulares: " + vector[2] + 
				", Usos totales: " + vector[3] +"]";
		
	}
}
